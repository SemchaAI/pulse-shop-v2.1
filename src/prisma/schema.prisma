generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

//
enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum Role {
  USER
  ADMIN
  GUEST
}

model User {
  id Int @id @default(autoincrement())

  name     String @unique
  email    String @unique
  password String
  role     Role   @default(USER)

  avatar    String?
  firstName String?
  lastName  String?
  phone     String?

  provider   String?
  providerId String? @unique

  verified DateTime?

  // tokenRef Token  @relation(fields: [token], references: [token])
  // token String @unique

  cart             Cart?
  favorite         Favorite?
  rating           Rating[]
  order            Order[]
  verificationCode VerificationCode?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  // // token String?
  // tokenRef Token  @relation(fields: [token], references: [token])
  // token    String @unique

  cartProducts CartProduct[]

  totalAmount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartProduct {
  id Int @id @default(autoincrement())

  quantity Int @default(1)

  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId Int

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  // token String?
  // tokenRef Token  @relation(fields: [token], references: [token])
  // token    String @unique

  // favoriteProducts FavoriteProduct[]
  favoriteProducts ProductVariant[] @relation("FavoriteProducts")

  // totalAmount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model FavoriteProduct {
//   id Int @id @default(autoincrement())

//   // quantity Int @default(1)

//   productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
//   productVariantId Int

//   favorite   Favorite @relation(fields: [favoriteId], references: [id])
//   favoriteId Int

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Product {
  id          Int    @id @default(autoincrement())
  description String

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  tags        Tag[]            @relation("ProductTags")
  variants    ProductVariant[]
  //collections Collection[]     @relation("ProductCollections")
  images      Image[]
  ProductInfo ProductInfo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id])

  name String
  slug String @unique

  stock    Int     @default(0) // Stock for this specific variant
  price    Float // Price for this specific variant
  oldPrice Float?
  images   Image[]

  rating      Rating[]
  totalRating Float    @default(0)

  colorId Int?
  color   Color? @relation(fields: [colorId], references: [id])

  ramId Int?
  ram   Ram? @relation(fields: [ramId], references: [id])

  memoryId Int?
  memory   Memory? @relation(fields: [memoryId], references: [id])

  favorite Favorite[]    @relation("FavoriteProducts")
  cart     CartProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, colorId, memoryId, ramId])
}

model Image {
  id     Int     @id @default(autoincrement())
  url    String // Image URL
  isMain Boolean @default(false)

  productId Int? // Optional relation to Product
  product   Product?        @relation(fields: [productId], references: [id])
  variantId Int? // Optional relation to ProductVariant
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
}

model ProductInfo {
  id Int @id @default(autoincrement())

  title       String
  description String

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([title, description, productId])
}

model Color {
  id Int @id @default(autoincrement())

  name    String @unique
  hexCode String

  productVariant ProductVariant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Memory {
  id Int @id @default(autoincrement())

  name String @unique

  productVariant ProductVariant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ram {
  id Int @id @default(autoincrement())

  name String @unique

  productVariant ProductVariant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id Int @id @default(autoincrement())

  message String
  rate    Int
  name    String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  ProductVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  productVariantId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productVariantId])
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String    @unique
  products Product[] @relation("ProductTags")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Collection {
//   id        String           @id @default(c uid())
//   name      String           // Collection name (e.g., "Fall 2025", "Running Gear")
//   slug      String           @unique
//   products  Product[]        @relation("ProductCollections")
// }

model VerificationCode {
  id Int @id @default(autoincrement())

  code String

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

model Order {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  // token String

  totalAmount Int
  status      OrderStatus @default(PENDING)
  paymentId   String?

  items Json

  name    String
  address String
  email   String
  phone   String
  comment String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BannerSlide {
  id      Int    @id @default(autoincrement())
  desktop String
  tablet  String
  mobile  String

  base64 String

  alt String

  width  Int
  height Int

  priority Boolean
  href     String
}
